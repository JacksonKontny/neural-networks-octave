function [error, correct] = evaluate(input, weights, biases, target, cost_function)    # Get the specified cost error and the correct number of classifications    # given the input and weights and biases for feedforward prediction, and the    # target for testing the prediction.  Possible cost_fucntion options include:    # mse - Mean Square Error    # log-likelihood - Log Likelihood    # cross-entropy - Cross Entropy    # Get the z and activations    [zs, activations] = feedforward(input, weights, biases);        # the predicted class is the max class predicted by the indices.  See if it    # matches the target index predictions    [_, target_idxs] = max(target);        predictions = activations{end};    [_, prediction_idxs] = max(predictions);        if (strcmp(cost_function,'mse'))        # MSE is the squared sum of the vector lengths / ( 2 * N samples )        error = sum(norm(target - predictions).^2)/(2 * length(target));    elseif (strcmp(cost_function, 'cross-entropy'))        error = - sum(sum(            target .* log(activations{end} + eps) + ...            (1 - target) .* log(1 - activations{end} + eps)        )) / length(target);    elseif (strcmp(cost_function, 'log-likelihood'))        error = - sum(sum(log(activations{end})));    endif        correct = sum(target_idxs == prediction_idxs);endfunction